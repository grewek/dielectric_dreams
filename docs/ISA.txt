# Instruction Set Architecture
Targets:
    * I really like the Motorola 68000 ISA so this is were i am stealing some ideas from!
    * I want the ISA to be as fixed as possible i.e. no extra reads should be necessary for the decoder to figure out what comes next!

Current Issues:
    * The OFFSET seems to be wasted right now...
    * Opcode is probably oversized with 10bits maybe i can scale that down a bit?
    * Figure out a way to create these tables Programmatically? If i need to change things later down the line this will be a mess!!
    * The cycles it needs todo certain operations are just placeholders as i have no fucking clue on how to determine clock cycles from an ideas
      or even from a real processor :| hoping that i can learn that stuff somewhere...or i need an electrical engineer...
    * The Opcode tables will be insanely huge :( 


# Addressing Modes
Atomic - Register to Register Moves.
Immediate - Opcode is followed by a Value of the length specified by the sz field
MemoryDest - Source from Register into MemoryDest.
MemoryDestInc - Source from Register into MemoryDest increment Address of destination register.
MemoryDestDec - Source from Register into MemoryDest decrement Address of destination register.
MemorySrc - Memory Source into Register.
MemorySrcInc - Memory Source into Register increment Address of source register.
MemorySrcDec - Memory Source into Register decrement Address of source register.

# Opcodes

### Legend
  /  = Either a Data Register or an Address Register.
  Imm8 = Immediate Byte value.
  Imm16 = Immediate Word value.
  Imm32 = Immediate Dword value.
  Dn = D0-15
  An = A0-15

## NOOP

### Description
Does nothing. Waits for one cycle and resumes execution!

BINARY REPR                                                              HEXDUMP            OPCODE                   CYCLES      FLAGS
[SZ][ OFFSET     ][ SOURCE  ][ DEST   ] [ OPCODE                     ]
0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0   0x00000000         NOOP                      1           None

## MOVE(Atomic Mode)

Copies the value in the source register into the destination register. Sets the Zero and Negative flags in accordance to the copied value.


[SZ][ OFFSET     ][ SOURCE  ][ DEST   ] [ ADDR_M   ]  [OPCODE        ]
0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 1   0x00000001         MOVE.B  Dn/An,Dn/An       1           Z,N
0 1 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 1   0x40000001         MOVE.W  Dn/An,Dn/An       1           Z,N
1 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 1   0x80000001         MOVE.DW Dn/An,Dn/An       1           Z,N

## MOVE(Immediate)

Copies the value from Memory into the destination register. Byte values are contained inside the Opcode itself!

[SZ][ BYTE OPERAND          ][ DEST   ] [ ADDR_M   ]  [OPCODE        ]
0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 1  0 0 0 0  0 0 0 1   0x00000101         MOVE.B  Dn/An,#Imm8        1           Z,N
0 1 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 1  0 0 0 0  0 0 0 1   0x40000101         MOVE.W  Dn/An,#Imm16       ?           Z,N
1 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 1  0 0 0 0  0 0 0 1   0x80000101         MOVE.DW Dn/An,#Imm32       ?           Z,N

## MOVE(Memory Destination)

Moves the value of a source register into the memory that is specified by the destination register. 

[SZ][ OFFSET     ][ SOURCE  ][ DEST   ] [ ADDR_M   ]  [OPCODE        ]
0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 1 0  0 0 0 0  0 0 0 1    0x00000201         MOVE.B  (An),Dn             ?          Z,N(?)
0 1 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 1 0  0 0 0 0  0 0 0 1    0x40000201         MOVE.W  (An),Dn             ?          Z,N(?)
1 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 1 0  0 0 0 0  0 0 0 1    0x80000201         MOVE.DW (An),Dn             ?          Z,N(?)

## MOVE(Memory Source)

Moves a value from memory pointed to by an address register into the specified data register.

[SZ][ OFFSET     ][ SOURCE  ][ DEST   ] [ ADDR_M   ]  [OPCODE        ]
0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 1 1  0 0 0 0  0 0 0 1    0x00000301         MOVE.B  Dn,(An)             ?          Z,N(?)
0 1 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 1 1  0 0 0 0  0 0 0 1    0x40000301         MOVE.W  Dn,(An)             ?          Z,N(?)
1 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 1 1  0 0 0 0  0 0 0 1    0x80000301         MOVE.DW Dn,(An)             ?          Z,N(?)

## Move (Memory Dest Increment)

Move a value from the specified data register into the location specified by the address register. Increase the target pointer
by the size of the SZ field.

[SZ][ OFFSET     ][ SOURCE  ][ DEST   ] [ ADDR_M   ]  [OPCODE        ]
0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 1 0 0  0 0 0 0  0 0 0 1    0x00000401         MOVE.B  (An)+,Dn             ?          Z,N(?)
0 1 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 1 0 0  0 0 0 0  0 0 0 1    0x40000401         MOVE.W  (An)+,Dn             ?          Z,N(?)
1 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 1 0 0  0 0 0 0  0 0 0 1    0x80000401         MOVE.DW (An)+,Dn             ?          Z,N(?)

## Move (Memory Src Increment)
Move a value from Memory indicated by the specified address register into the target data register. Increase the target pointer
by the size of the SZ field.

[SZ][ OFFSET     ][ SOURCE  ][ DEST   ] [ ADDR_M   ]  [OPCODE        ]
0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 1 0 1  0 0 0 0  0 0 0 1    0x00000501         MOVE.B  Dn,(An)+             ?          Z,N(?)
0 1 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 1 0 1  0 0 0 0  0 0 0 1    0x40000501         MOVE.W  Dn,(An)+             ?          Z,N(?)
1 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 1 0 1  0 0 0 0  0 0 0 1    0x80000501         MOVE.DW Dn,(An)+             ?          Z,N(?)


## Move (Memory Dest Decrement)
Move a value from the specified data register into the location specified by the address register. Decrease the target pointer
by the size of the SZ field.

[SZ][ OFFSET     ][ SOURCE  ][ DEST   ] [ ADDR_M   ]  [OPCODE        ]
0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 1 1 0  0 0 0 0  0 0 0 1    0x00000601         MOVE.B  (An)-,Dn             ?          Z,N(?)
0 1 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 1 1 0  0 0 0 0  0 0 0 1    0x40000601         MOVE.W  (An)-,Dn             ?          Z,N(?)
1 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 1 1 0  0 0 0 0  0 0 0 1    0x80000601         MOVE.DW (An)-,Dn             ?          Z,N(?)

## Move (Memory Source Decrement)
Move a value from Memory indicated by the specified address register into the target data register. Decrease the target pointer
by the size of the SZ field.

[SZ][ OFFSET     ][ SOURCE  ][ DEST   ] [ ADDR_M   ]  [OPCODE        ]
0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 1 1 1  0 0 0 0  0 0 0 1    0x00000701         MOVE.B  Dn,(An)+             ?          Z,N(?)
0 1 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 1 1 1  0 0 0 0  0 0 0 1    0x40000701         MOVE.W  Dn,(An)+             ?          Z,N(?)
1 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 1 1 1  0 0 0 0  0 0 0 1    0x80000701         MOVE.DW Dn,(An)+             ?          Z,N(?)
