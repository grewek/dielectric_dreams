# Instruction Set Architecture
Targets:
    * I really like the Motorola 68000 ISA so this is were i am stealing some ideas from!
    * I want the ISA to be as fixed as possible i.e. no extra reads should be necessary for the decoder to figure out what comes next!

Current Issues:
    * The OFFSET seems to be wasted right now...
    * Opcode is probably oversized with 10bits maybe i can scale that down a bit?
    * Figure out a way to create these tables Programmatically? If i need to change things later down the line this will be a mess!!
    * The cycles it needs todo certain operations are just placeholders as i have no fucking clue on how to determine clock cycles from an ideas
      or even from a real processor :| hoping that i can learn that stuff somewhere...or i need an electrical engineer...
    * The Opcode tables will be insanely huge :( 


# Addressing Modes
Atomic - Register to Register Moves.
Immediate - Opcode is followed by a Value of the length specified by the sz field
MemoryDest - Source from Register into MemoryDest.
MemoryDestInc - Source from Register into MemoryDest increment Address of destination register.
MemoryDestDec - Source from Register into MemoryDest decrement Address of destination register.
MemorySrc - Memory Source into Register.
MemorySrcInc - Memory Source into Register increment Address of source register.
MemorySrcDec - Memory Source into Register decrement Address of source register.

# Opcodes

### Legend
  /  = Either a Data Register or an Address Register.
  Imm8 = Immediate Byte value.
  Imm16 = Immediate Word value.
  Imm32 = Immediate Dword value.
  Dn = D0-31

## NOOP

### Description
Does nothing. Waits for one cycle and resumes execution!

Flags are unchanged

BINARY REPR                                                                    HEXDUMP            OPCODE                   CYCLES      FLAGS
32.......................21 20..........................................1
[         OPCODE          ] [                   UNUSED                  ]
[0 0 0 0  0 0 0 0  0 0 0 0] [0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0]      0x00000000         NOOP                     1           *  

## MOV(Register)

Copies the value in the source register into the destination register. Always copies the full content of a register.

Flags are unchanged

BINARY REPR                                                                          HEXDUMP            OPCODE                   CYCLES      FLAGS
32.......................21  20........16  15........11  10....................1
[         OPCODE          ]  [  SOURCE  ]  [   DEST   ]  [     UNUSED          ]
[0 0 0 0  0 0 0 0  0 0 0 1]  [0 0 0 0  0]  [0 0 0  0 0]  [0 0  0 0 0 0  0 0 0 1]     0x00200000        MOVE  Dn,Dn               1           *

## MOVI(Immediate)

Copies the value from Memory into the destination register. Byte values are contained inside the Opcode itself!

[SZ][ BYTE OPERAND          ][ DEST   ] [ ADDR_M   ]  [OPCODE        ]
0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 1  0 0 0 0  0 0 0 1   0x00000101         MOVE.B  Dn/An,#Imm8        1           Z,N
0 1 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 1  0 0 0 0  0 0 0 1   0x40000101         MOVE.W  Dn/An,#Imm16       ?           Z,N
1 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 1  0 0 0 0  0 0 0 1   0x80000101         MOVE.DW Dn/An,#Imm32       ?           Z,N

## STR(Memory Destination)

Moves the value of a source register into the memory that is specified by the destination register. 

[SZ][ OFFSET     ][ SOURCE  ][ DEST   ] [ ADDR_M   ]  [OPCODE        ]
0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 1 0  0 0 0 0  0 0 0 1    0x00000201         MOVE.B  (An),Dn             ?          Z,N(?)
0 1 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 1 0  0 0 0 0  0 0 0 1    0x40000201         MOVE.W  (An),Dn             ?          Z,N(?)
1 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 1 0  0 0 0 0  0 0 0 1    0x80000201         MOVE.DW (An),Dn             ?          Z,N(?)

## LDR(Memory Source)

Moves a value from memory pointed to by an address register into the specified data register.

[SZ][ OFFSET     ][ SOURCE  ][ DEST   ] [ ADDR_M   ]  [OPCODE        ]
0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 1 1  0 0 0 0  0 0 0 1    0x00000301         MOVE.B  Dn,(An)             ?          Z,N(?)
0 1 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 1 1  0 0 0 0  0 0 0 1    0x40000301         MOVE.W  Dn,(An)             ?          Z,N(?)
1 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 1 1  0 0 0 0  0 0 0 1    0x80000301         MOVE.DW Dn,(An)             ?          Z,N(?)

## Move (Memory Dest Increment)

Move a value from the specified data register into the location specified by the address register. Increase the target pointer
by the size of the SZ field.

[SZ][ OFFSET     ][ SOURCE  ][ DEST   ] [ ADDR_M   ]  [OPCODE        ]
0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 1 0 0  0 0 0 0  0 0 0 1    0x00000401         MOVE.B  (An)+,Dn             ?          Z,N(?)
0 1 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 1 0 0  0 0 0 0  0 0 0 1    0x40000401         MOVE.W  (An)+,Dn             ?          Z,N(?)
1 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 1 0 0  0 0 0 0  0 0 0 1    0x80000401         MOVE.DW (An)+,Dn             ?          Z,N(?)

## Move (Memory Src Increment)
Move a value from Memory indicated by the specified address register into the target data register. Increase the target pointer
by the size of the SZ field.

[SZ][ OFFSET     ][ SOURCE  ][ DEST   ] [ ADDR_M   ]  [OPCODE        ]
0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 1 0 1  0 0 0 0  0 0 0 1    0x00000501         MOVE.B  Dn,(An)+             ?          Z,N(?)
0 1 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 1 0 1  0 0 0 0  0 0 0 1    0x40000501         MOVE.W  Dn,(An)+             ?          Z,N(?)
1 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 1 0 1  0 0 0 0  0 0 0 1    0x80000501         MOVE.DW Dn,(An)+             ?          Z,N(?)


## Move (Memory Dest Decrement)
Move a value from the specified data register into the location specified by the address register. Decrease the target pointer
by the size of the SZ field.

[SZ][ OFFSET     ][ SOURCE  ][ DEST   ] [ ADDR_M   ]  [OPCODE        ]
0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 1 1 0  0 0 0 0  0 0 0 1    0x00000601         MOVE.B  (An)-,Dn             ?          Z,N(?)
0 1 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 1 1 0  0 0 0 0  0 0 0 1    0x40000601         MOVE.W  (An)-,Dn             ?          Z,N(?)
1 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 1 1 0  0 0 0 0  0 0 0 1    0x80000601         MOVE.DW (An)-,Dn             ?          Z,N(?)

## Move (Memory Source Decrement)
Move a value from Memory indicated by the specified address register into the target data register. Decrease the target pointer
by the size of the SZ field.

[SZ][ OFFSET     ][ SOURCE  ][ DEST   ] [ ADDR_M   ]  [OPCODE        ]
0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 1 1 1  0 0 0 0  0 0 0 1    0x00000701         MOVE.B  Dn,(An)+             ?          Z,N(?)
0 1 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 1 1 1  0 0 0 0  0 0 0 1    0x40000701         MOVE.W  Dn,(An)+             ?          Z,N(?)
1 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 1 1 1  0 0 0 0  0 0 0 1    0x80000701         MOVE.DW Dn,(An)+             ?          Z,N(?)


## LEA (Load Effective Address Immediate)

Load the immediate value into the address register indicated by the destination.

[SZ][ OFFSET     ][ SOURCE  ][ DEST   ] [ ADDR_M   ]  [OPCODE        ]
1 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 1 1 1  0 0 0 0  0 0 1 0    0x80000702         LEA.DW An,#Imm32              ?          None

## PUSH (Immediate Value)

Store a immediate value at the top of the stack pointer decrease the value of the stack pointer.

[SZ][ OFFSET     ][ SOURCE  ][ DEST   ] [ ADDR_M   ]  [OPCODE        ]
0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 1  0 0 0 0  0 0 1 1    0x00000103         PUSH.B #Imm8                   ?          None
0 1 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 1  0 0 0 0  0 0 1 1    0x40000103         PUSH.W #Imm16                  ?          None
1 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 1  0 0 0 0  0 0 1 1    0x80000103         PUSH.DW #Imm32                 ?          None

## PUSH (Register)

Push a value that is inside a data/address register

[SZ][ OFFSET     ][ SOURCE  ][ DEST   ] [ ADDR_M   ]  [OPCODE        ]
0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 1 1    0x00000003         PUSH.B Dn/An                   ?          None
0 1 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 1 1    0x40000003         PUSH.W Dn/An                   ?          None
1 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 1 1    0x80000003         PUSH.DW Dn/An                  ?          None

## PUSH (From Memory)

Push a value that is pointed to by an address register

[SZ][ OFFSET     ][ SOURCE  ][ DEST   ] [ ADDR_M   ]  [OPCODE        ]
0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 1 0  0 0 0 0  0 0 1 1    0x00000203         PUSH.B  (An)
0 1 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 1 0  0 0 0 0  0 0 1 1    0x40000203         PUSH.W  (An)
1 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 1 0  0 0 0 0  0 0 1 1    0x80000203         PUSH.DW (An)                   ?          None

## PUSH (From Memory Increment)

Push the value that is pointed to by an address register onto the stack, the address register will increase by the indicated size after the operation

[SZ][ OFFSET     ][ SOURCE  ][ DEST   ] [ ADDR_M   ]  [OPCODE        ]
0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 1 1  0 0 0 0  0 0 1 1    0x00000303         PUSH.B  (An)+                  ?          None
0 1 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 1 1  0 0 0 0  0 0 1 1    0x40000303         PUSH.W  (An)+                  ?          None
1 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 1 1  0 0 0 0  0 0 1 1    0x80000303         PUSH.DW (An)+                  ?          None

## PUSH (From Memory Decrement)

Push the value that is pointed to by an address register onto the stack, the address register will decrease by the indicated size after the operation

[SZ][ OFFSET     ][ SOURCE  ][ DEST   ] [ ADDR_M   ]  [OPCODE        ]
0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 1 0 0  0 0 0 0  0 0 1 1    0x00000403         PUSH.B  (An)-                  ?          None
0 1 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 1 0 0  0 0 0 0  0 0 1 1    0x40000403         PUSH.W  (An)-                  ?          None
1 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 1 0 0  0 0 0 0  0 0 1 1    0x80000403         PUSH.DW (An)-                  ?          None


## POP (To Register)

Restore the value into the specified register increase the value of the stack pointer.

[SZ][ OFFSET     ][ SOURCE  ][ DEST   ] [ ADDR_M   ]  [OPCODE        ]
0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 1 0 0    0x00000004         POP.B Dn/An                     ?          None
0 1 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 1 0 0    0x40000004         POP.W Dn/An                     ?          None
1 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 1 0 0    0x80000004         POP.DW Dn/An                    ?          None


## POP (To Memory)

Restore the value with the indicated size at the top of the stack into the memory addressed by the Address Register

[SZ][ OFFSET     ][ SOURCE  ][ DEST   ] [ ADDR_M   ]  [OPCODE        ]
0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 1 0  0 0 0 0  0 1 0 0    0x00000204         POP.B  (An)                     ?          None
0 1 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 1 0  0 0 0 0  0 1 0 0    0x40000204         POP.W  (An)                     ?          None
1 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 1 0  0 0 0 0  0 0 0 0    0x80000204         POP.DW (An)                     ?          None

## POP (To Memory Increment)

Restore the value at the top of the stack into the memory address point to by the address register and increment it by the size of the operation.

[SZ][ OFFSET     ][ SOURCE  ][ DEST   ] [ ADDR_M   ]  [OPCODE        ]
0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 1 0 0  0 0 0 0  0 1 0 0    0x00000404         POP.B  (An)+                    ?          None
0 1 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 1 0 0  0 0 0 0  0 1 0 0    0x40000404         POP.W  (An)+                    ?          None
1 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 1 0 0  0 0 0 0  0 1 0 0    0x80000404         POP.DW (An)+                    ?          None


## Pop (To Memory Decrement)

Restore the value at the top of the stack into the memory address pointed to by the address register and decrement it by the size of the operation

[SZ][ OFFSET     ][ SOURCE  ][ DEST   ] [ ADDR_M   ]  [OPCODE        ]
0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 1 1 0  0 0 0 0  0 1 0 0    0x00000404         POP.B  (An)-                    ?          None
0 1 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 1 1 0  0 0 0 0  0 1 0 0    0x40000404         POP.W  (An)-                    ?          None
1 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 1 1 0  0 0 0 0  0 1 0 0    0x80000604         POP.DW (An)-                    ?          None
