# Instruction Set Architecture
Targets:
    * I really like the Motorola 68000 ISA so this is were i am stealing some ideas from!
    * I want the ISA to be as fixed as possible i.e. no extra reads should be necessary for the decoder to figure out what comes next!

Current Issues:
    * Probably a lot of issues i don't see or have no clue that they even exist.


# Addressing Modes

TBD

# Opcodes

### Legend
  #Imm8 = Immediate Byte value.
  #Imm16 = Immediate Word value.
  #Imm32 = Immediate Dword value.
  Dn = D0-31

## NOOP

### Description
Does nothing. Waits for one cycle and resumes execution!

BINARY REPR                                                                    HEXDUMP            OPCODE                   CYCLES      FLAGS
32.......................21 20..........................................1
[         OPCODE          ] [                   UNUSED                  ]
[0 0 0 0  0 0 0 0  0 0 0 0] [0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0]      0x00000000         NOOP                     1           *  

## MOV(Register)

Move - Copies the value in the source register into the destination register. Always copies the full content of a register.

BINARY REPR                                                                          HEXDUMP            OPCODE                   CYCLES      FLAGS
32.......................21  20........16  15........11  10....................1
[         OPCODE          ]  [  SOURCE  ]  [   DEST   ]  [     UNUSED          ]
[0 0 0 0  0 0 0 0  0 0 0 1]  [0 0 0 0  0]  [0 0 0 0  0]  [0 0 0 0  0 0 0 0 0  0]     0x00200000         MOVE  Dn,Dn               1           *

## MOVQ

Move Quick - Moves a 15-bit Value that is encoded in the instruction itself into the destination register

BINARY REPR                                                                          HEXDUMP            OPCODE                   CYCLES      FLAGS
32.......................21  20........16  15...............................1
[         OPCODE          ]  [   DEST   ]  [              VALUE             ]
[0 0 0 0  0 0 0 0  0 0 1 0]  [0 0 0 0  0]  [* * * *  * * * *  * * * *  * * *]        0x00400000         MOVEQ  Dn,#Imm15          1           *

## MOVI

Move Immediate Value - Move the specified constant value into the specified register, this instruction has a length of two instruction words.

'*' = Bit setting is undefined.

BINARY REPR                                                                          HEXDUMP            OPCODE                   CYCLES      FLAGS
32.......................21  20........16  15...............................1
[         OPCODE          ]  [   DEST   ]  [              UNUSED            ]
[0 0 0 0  0 0 0 0  0 0 1 1]  [0 0 0 0  0]  [* * * *  * * * *  * * * *  * * *]        0x00600000         MOVEI Dn,#Imm32		 2           *

## STR

Store Register - Stores the Value in the specified source register into address specified by the destination register.

BINARY REPR                                                                          HEXDUMP            OPCODE                   CYCLES      FLAGS
32.......................21  20........16  15........11  10.........6  5  4........1
[         OPCODE          ]  [  SOURCE  ]  [   DEST   ]  [ R_OFFSET ] [O] [ MODE   ]
[0 0 0 0  0 0 0 0  0 1 0 0]  [0 0 0 0  0]  [0 0 0 0  0]  [0 0 0 0  0] [0] [0 0 0  0]   0x00800000         STR.DW  (Dn+O)  ,Dn
[0 0 0 0  0 0 0 0  0 1 0 0]  [0 0 0 0  0]  [0 0 0 0  0]  [0 0 0 0  0] [0] [0 0 0  1]   0x00800001         STR.DW +(Dn+O)  ,Dn
[0 0 0 0  0 0 0 0  0 1 0 0]  [0 0 0 0  0]  [0 0 0 0  0]  [0 0 0 0  0] [0] [0 0 1  0]   0x00800002         STR.DW -(Dn+O)  ,Dn
[0 0 0 0  0 0 0 0  0 1 0 0]  [0 0 0 0  0]  [0 0 0 0  0]  [0 0 0 0  0] [0] [0 0 1  1]   0x00800003         STR.DW  (Dn+O)+ ,Dn
[0 0 0 0  0 0 0 0  0 1 0 0]  [0 0 0 0  0]  [0 0 0 0  0]  [0 0 0 0  0] [0] [0 1 0  0]   0x00800004         STR.DW  (Dn+O)- ,Dn
[0 0 0 0  0 0 0 0  0 1 0 0]  [0 0 0 0  0]  [0 0 0 0  0]  [0 0 0 0  0] [0] [0 1 0  1]   0x00800005         STR.W   (Dn+O)  ,Dn
[0 0 0 0  0 0 0 0  0 1 0 0]  [0 0 0 0  0]  [0 0 0 0  0]  [0 0 0 0  0] [0] [0 1 1  0]   0x00800006         STR.W  +(Dn+O)  ,Dn
[0 0 0 0  0 0 0 0  0 1 0 0]  [0 0 0 0  0]  [0 0 0 0  0]  [0 0 0 0  0] [0] [0 1 1  1]   0x00800007         STR.W  -(Dn+O)  ,Dn
[0 0 0 0  0 0 0 0  0 1 0 0]  [0 0 0 0  0]  [0 0 0 0  0]  [0 0 0 0  0] [0] [1 0 0  0]   0x00800008         STR.W   (Dn+O)+ ,Dn
[0 0 0 0  0 0 0 0  0 1 0 0]  [0 0 0 0  0]  [0 0 0 0  0]  [0 0 0 0  0] [0] [1 0 0  1]   0x00800009         STR.W   (Dn+O)- ,Dn
[0 0 0 0  0 0 0 0  0 1 0 0]  [0 0 0 0  0]  [0 0 0 0  0]  [0 0 0 0  0] [0] [1 0 1  0]   0x0080000A         STR.B   (Dn+O)  ,Dn
[0 0 0 0  0 0 0 0  0 1 0 0]  [0 0 0 0  0]  [0 0 0 0  0]  [0 0 0 0  0] [0] [1 0 1  1]   0x0080000B         STR.B  +(Dn+O)  ,Dn
[0 0 0 0  0 0 0 0  0 1 0 0]  [0 0 0 0  0]  [0 0 0 0  0]  [0 0 0 0  0] [0] [1 1 0  0]   0x0080000C         STR.B  -(Dn+O)  ,Dn
[0 0 0 0  0 0 0 0  0 1 0 0]  [0 0 0 0  0]  [0 0 0 0  0]  [0 0 0 0  0] [0] [1 1 0  1]   0x0080000D         STR.B   (Dn+O)+ ,Dn
[0 0 0 0  0 0 0 0  0 1 0 0]  [0 0 0 0  0]  [0 0 0 0  0]  [0 0 0 0  0] [0] [1 1 1  0]   0x0080000E         STR.B   (Dn+O)- ,Dn




## LDR

Load Register - Moves the Value that is pointed to by the source register into the destination register.

BINARY REPR                                                                          HEXDUMP            OPCODE                   CYCLES      FLAGS
32.......................21  20........16  15........11  10.........6  5  4........1
[         OPCODE          ]  [  SOURCE  ]  [   DEST   ]  [ R_OFFSET ] [O] [ MODE   ]
[0 0 0 0  0 0 0 0  0 1 0 1]  [0 0 0 0  0]  [0 0 0 0  0]  [0 0 0 0  0] [0] [0 0 0  0]   0x00A00000       LDR.DW   (Dn+O)   ,Dn
[0 0 0 0  0 0 0 0  0 1 0 1]  [0 0 0 0  0]  [0 0 0 0  0]  [0 0 0 0  0] [0] [0 0 0  1]   0x00A00001       LDR.DW  +(Dn+O)   ,Dn
[0 0 0 0  0 0 0 0  0 1 0 1]  [0 0 0 0  0]  [0 0 0 0  0]  [0 0 0 0  0] [0] [0 0 1  0]   0x00A00002       LDR.DW  -(Dn+O)   ,Dn
[0 0 0 0  0 0 0 0  0 1 0 1]  [0 0 0 0  0]  [0 0 0 0  0]  [0 0 0 0  0] [0] [0 0 1  1]   0x00A00003       LDR.DW   (Dn+O)+  ,Dn
[0 0 0 0  0 0 0 0  0 1 0 1]  [0 0 0 0  0]  [0 0 0 0  0]  [0 0 0 0  0] [0] [0 1 0  0]   0x00A00004       LDR.DW   (Dn+O)-  ,Dn
[0 0 0 0  0 0 0 0  0 1 0 1]  [0 0 0 0  0]  [0 0 0 0  0]  [0 0 0 0  0] [0] [0 1 0  1]   0x00A00005       LDR.W    (Dn+O)   ,Dn
[0 0 0 0  0 0 0 0  0 1 0 1]  [0 0 0 0  0]  [0 0 0 0  0]  [0 0 0 0  0] [0] [0 1 1  0]   0x00A00006       LDR.W   +(Dn+O)   ,Dn
[0 0 0 0  0 0 0 0  0 1 0 1]  [0 0 0 0  0]  [0 0 0 0  0]  [0 0 0 0  0] [0] [0 1 1  1]   0x00A00007       LDR.W   -(Dn+O)   ,Dn
[0 0 0 0  0 0 0 0  0 1 0 1]  [0 0 0 0  0]  [0 0 0 0  0]  [0 0 0 0  0] [0] [1 0 0  0]   0x00A00008       LDR.W    (Dn+O)+  ,Dn
[0 0 0 0  0 0 0 0  0 1 0 1]  [0 0 0 0  0]  [0 0 0 0  0]  [0 0 0 0  0] [0] [1 0 0  1]   0x00A00009       LDR.W    (Dn+O)-  ,Dn
[0 0 0 0  0 0 0 0  0 1 0 1]  [0 0 0 0  0]  [0 0 0 0  0]  [0 0 0 0  0] [0] [1 0 1  0]   0x00A0000A       LDR.B    (Dn+O)   ,Dn
[0 0 0 0  0 0 0 0  0 1 0 1]  [0 0 0 0  0]  [0 0 0 0  0]  [0 0 0 0  0] [0] [1 0 1  1]   0x00A0000B       LDR.B   +(Dn+O)   ,Dn
[0 0 0 0  0 0 0 0  0 1 0 1]  [0 0 0 0  0]  [0 0 0 0  0]  [0 0 0 0  0] [0] [1 1 0  0]   0x00A0000C       LDR.B   -(Dn+O)   ,Dn
[0 0 0 0  0 0 0 0  0 1 0 1]  [0 0 0 0  0]  [0 0 0 0  0]  [0 0 0 0  0] [0] [1 1 0  1]   0x00A0000D       LDR.B    (Dn+O)+  ,Dn
[0 0 0 0  0 0 0 0  0 1 0 1]  [0 0 0 0  0]  [0 0 0 0  0]  [0 0 0 0  0] [0] [1 1 1  0]   0x00A0000E       LDR.B    (Dn+O)-  ,Dn
[0 0 0 0  0 0 0 0  0 1 0 1]  [0 0 0 0  0]  [0 0 0 0  0]  [0 0 0 0  0] [0] [1 1 1  0]   0x00A0000F       LDR.B    (Dn+O)-  ,Dn

## LEA

Load Effective Address - Loads an address either from an immediate value, register or memory location. An Immediate Value needs a second read from memory.

'*' = Bit setting is undefined.
'-' = Indicates Bits that are used to indicate the source register.

BINARY REPR                                                                             HEXDUMP            OPCODE                   CYCLES      FLAGS
32.......................21  20............14 13.........9 8.................1
[         OPCODE          ]  [    SOURCE    ] [   DEST   ] [     UNUSED      ]
[0 0 0 0  0 0 0 0  0 1 1 0]  [0 0 0 0  0 0 0] [0 0 0 0  0] [* * *  * * * *  *]          0x00C00000         LEA  Dn ,#Imm32
[0 0 0 0  0 0 0 0  0 1 1 0]  [- - - -  - 1 0] [0 0 0 0  0] [* * *  * * * *  *]          0x00C00000         LEA  Dn ,(Dn)
[0 0 0 0  0 0 0 0  0 1 1 0]  [- - - -  - 1 1] [0 0 0 0  0] [* * *  * * * *  *]          0x00C00000         LEA  Dn ,Dn

## PUSH (Immediate Value)

Store a immediate value at the top of the stack pointer decrease the value of the stack pointer.

[SZ][ OFFSET     ][ SOURCE  ][ DEST   ] [ ADDR_M   ]  [OPCODE        ]
0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 1  0 0 0 0  0 0 1 1    0x00000103         PUSH.B #Imm8                   ?          None
0 1 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 1  0 0 0 0  0 0 1 1    0x40000103         PUSH.W #Imm16                  ?          None
1 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 1  0 0 0 0  0 0 1 1    0x80000103         PUSH.DW #Imm32                 ?          None

## PUSH (Register)

Push a value that is inside a data/address register

[SZ][ OFFSET     ][ SOURCE  ][ DEST   ] [ ADDR_M   ]  [OPCODE        ]
0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 1 1    0x00000003         PUSH.B Dn/An                   ?          None
0 1 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 1 1    0x40000003         PUSH.W Dn/An                   ?          None
1 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0  0 0 1 1    0x80000003         PUSH.DW Dn/An                  ?          None

## PUSH

## POP

